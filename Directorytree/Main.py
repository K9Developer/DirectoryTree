import os
from pathlib import Path

from colored import Text

text_file_symbol = {
    "symbol": f"{Text.Color.black}üìÑ{Text.Style.Reset}",
    "file_type": "text",
    "supported_files": [
        "txt",
        "doc",
        "docx",
        "odt",
        "pdf",
        "rtf",
        "tex",
        "wpd",
        "config",
        "qbl",
        "b",
        "apkg",
        "qbl",
        "b",
        "doc",
        "apkg",
        "lt",
        "fdr",
        "odm",
        "mf",
        "fcf",
        "gite",
        "rft",
        "ty",
        "fodt",
        "docx",
        "diz",
        "man",
        "fpt",
        "ott",
        "adoc",
        "h",
        "upd",
        "am",
        "faq",
        "wtt",
        "an",
        "ave",
        "gdoc",
        "mnt",
        "apt",
        "doc",
        "gform",
        "rtf",
        "ltx",
        "txt",
        "org",
        "dc",
        "tmdx",
        "docm",
        "wp",
        "gpd",
        "tlb",
        "ig",
        "wpd",
        "dropbox",
        "rpt",
        "text",
        "tex",
        "vnt",
        "xy",
        "lue",
        "wpw",
        "fbl",
        "aim",
        "ipf",
        "eio",
        "pwdpl",
        "wp",
        "fadeintemplate",
        "jarvi",
        "log",
        "me",
        "md5txt",
        "lt",
        "gd",
        "rtx",
        "1t",
        "opeico",
        "copf",
        "gmap",
        "cm",
        "ac",
        "aww",
        "fountain",
        "ac",
        "rtfd",
        "hwp",
        "emulecollection",
        "lp2",
        "bib",
        "odt",
        "wp",
        "ri",
        "aty",
        "epp",
        "rad",
        "bdr",
        "luf",
        "tm",
        "dxb",
        "klg",
        "etf",
        "docz",
        "knt",
        "li",
        "wpt",
        "bib",
        "eml",
        "page",
        "readme",
        "cc",
        "rt",
        "_docx",
        "run",
        "mg",
        "tring",
        "gtable",
        "tmd",
        "abw",
        "wri",
        "latex",
        "omfl",
        "fdt",
        "chord",
        "ippot",
        "tory",
        "wp7",
        "fdx",
        "err",
        "mbox",
        "ke",
        "glide",
        "hwp",
        "nfo",
        "note",
        "af",
        "gm",
        "pwd",
        "ji",
        "appodeal",
        "docxml",
        "frt",
        "dfti",
        "utf8",
        "u3i",
        "charet",
        "bean",
        "cod",
        "dx",
        "template",
        "tw",
        "now",
        "eit",
        "textclipping",
        "dvi",
        "odif",
        "wpt",
        "nglo",
        "dm",
        "xwp",
        "jnp",
        "emlx",
        "rvf",
        "e",
        "xw",
        "klg",
        "ndoc",
        "xwp",
        "trelby",
        "bdp",
        "page-tef",
        "plain",
        "pw",
        "la",
        "tab",
        "p7",
        "qdl",
        "odo",
        "kon",
        "idx",
        "doc",
        "wpd",
        "jp1",
        "bibtex",
        "pwi",
        "bad",
        "m",
        "tpc",
        "mwd",
        "mwp",
        "prt",
        "dg",
        "note",
        "pvm",
        "hht",
        "bna",
        "crivx",
        "bxt",
        "xyw",
        "boc",
        "criv",
        "rzk",
        "lagz",
        "tab",
        "bml",
        "rzn",
        "eion",
        "calca",
        "highland",
        "m",
        "pwr",
        "lbt",
        "mpd",
        "mellel",
        "wp4",
        "hbk",
        "fdf",
        "btd",
        "zrtf",
        "mw",
        "dca",
        "uot",
        "wpl",
        "wpd",
        "dm",
        "flr",
        "lxfml",
        "utxt",
        "cnm",
        "_doc",
        "afetext",
        "jtd",
        "ublime-project",
        "mell",
        "act",
        "ofl",
        "unauth",
        "lyx",
        "njx",
        "ebp",
        "euc",
        "ort",
        "hz",
        "wbk",
        "xdl",
        "vcf",
        "fft",
        "gjam",
        "tdf",
        "pu",
        "wp6",
        "prt",
        "am",
        "gpn",
        "etx",
        "dwd",
        "tmv",
        "rtd",
        "pmo",
        "awp",
        "err",
        "xbplate",
        "lwp",
        "fwdn",
        "awt",
        "quid",
        "a",
        "nb",
        "zabw",
        "joe",
        "gv",
        "xg",
        "dw",
        "openbd",
        "crwl",
        "acii",
        "ae",
        "lnk42",
        "md",
        "xbdoc",
        "vct",
        "xyp",
        "pimx",
        "ct",
        "del",
        "xwp",
        "lyt",
        "plantuml",
        "bb",
        "tdf",
        "dne",
        "cyi",
        "xdl",
        "xy3",
        "kwd",
        "unx",
        "wd",
        "pvj",
        "lnt",
        "tmvx",
        "fd",
        "pwdp",
        "brx",
        "uof",
        "cw",
        "kcard",
        "wp5",
        "nwm",
        "licene",
        "nwp",
        "dxp",
        "ublime-workpace",
        "fg",
        "qpf",
        "ptnx",
        "fdxt",
        "tid",
        "gcript",
        "webdoc" "boxnet web document" "vpdoc",
        "bf",
        "w3",
        "tfrproj",
        "cat",
        "pfx",
        "emf",
        "zw",
        "wtx",
        "wpa",
        "jrtf",
        "ltr",
        "min",
        "gthr",
        "bzabw",
        "wn",
        "cw",
        "tvj",
        "nwctxt",
        "iil",
        "ocr",
        "vw",
        "odp",
        "pdpcmd",
        "gmd",
        "thp",
        "mcw",
        "dox",
    ],
}
folder_symbol = {
    "symbol": f'{Text.fg("#ffe89f")}üìÇ{Text.Style.Reset}',
    "file_type": "folder",
}
zip_folder_symbol = {
    "symbol": f"{Text.Color.orange_red_1}üìÅ{Text.Style.Reset}",
    "file_type": "zip folder",
    "supported_files": [
        "zip",
        "zipx",
        "tar",
        "gz",
        "z",
        "cab",
        "rar",
        "bz2",
        "lzh",
        "7z",
        "img",
        "iso",
        "xz",
        "vhd",
        "vmdk",
    ],
}
image_symbol = {
    "symbol": f"{Text.Color.green_4}üé®{Text.Style.Reset}",
    f"file_type": "image",
    "supported_files": ["png", "jpg", "jpeg", "jfi", "jpe", "jif", "jfif", "gif"],
}
executable_symbol = {
    "symbol": f"{Text.Color.light_red}‚ñ∂{Text.Style.Reset}",
    "file_type": "executable",
    "supported_files": [
        "action",
        "apk",
        "app",
        "bat",
        "bin",
        "cmd",
        "com",
        "command",
        "cpl",
        "csh",
        "exe",
        "gadget",
        "inf 1",
        "ins",
        "inx",
        "ipa",
        "isu",
        "job",
        "jse",
        "ksh",
        "lnk",
        "msc",
        "msi",
        "msp",
        "mst",
        "osx",
        "out",
        "paf",
        "pif",
        "prg",
        "ps1",
        "reg",
        "rgs",
        "run",
        "scr",
        "sct",
        "shb",
        "shs" "u3p",
        "vb",
        "vbe",
        "vbs",
        "vbscript",
        "workflow",
        "ws",
        "wsf",
        "wsh",
    ],
}
video_symbol = {
    "symbol": f"{Text.Color.purple_1b}üé•{Text.Style.Reset}",
    "file_type": "video",
    "supported_files": [
        "mp4",
        "mov",
        "wmv",
        "avi",
        "avchd",
        "flv",
        "f4v",
        "swf",
        "mkv",
        "webm",
        "mpeg-2",
    ],
}
audio_symbol = {
    "symbol": f"{Text.Color.turquoise_4}üîä{Text.Style.Reset}",
    "file_type": "audio",
    "supported_files": [
        "mp3",
        "aac",
        "ogg vorbis",
        "flac",
        "alac",
        "wav",
        "aiff",
        "dsd",
        "pcm",
    ],
}
data_symbol = {
    "symbol": f"{Text.Color.green_4}üìä{Text.Style.Reset}",
    "file_type": "data",
    "supported_files": [
        "p97",
        "mar",
        "crypt10",
        "ddl",
        "teacher",
        "accdc",
        "accdt",
        "te",
        "gdb",
        "trm",
        "sqlite3",
        "accft",
        "fic",
        "dtsx",
        "sqlitedb",
        "pdb",
        "sqlite",
        "itdb",
        "nyf",
        "alf",
        "mdf",
        "db",
        "udl",
        "dbc",
        "4dl",
        "marshal",
        "itw",
        "daschema",
        "v12",
        "cdb",
        "dacpac",
        "daconnections",
        "abs",
        "pdm",
        "accde",
        "db",
        "fp3",
        "eco",
        "sdf",
        "db-wal",
        "sql",
        "pan",
        "sis",
        "his",
        "temx",
        "odb",
        "fp7",
        "gdb",
        "trc",
        "mdb",
        "dp1",
        "oqy",
        "db3",
        "rod",
        "wmdb",
        "dbcrypt8",
        "dbcrypt12",
        "crypt12",
        "ask",
        "sdb",
        "cdb",
        "dbcrypt",
        "$er",
        "crypt8",
        "dbf",
        "btr",
        "hdb",
        "sdb",
        "qvd",
        "flexolibrary",
        "crypt9",
        "dcb",
        "fdb",
        "adf",
        "crypt14",
        "dbs",
        "dlis",
        "crypt1",
        "sdb",
        "xld",
        "wdb",
        "dxl",
        "accdb",
        "adp",
        "frm",
        "crypt7",
        "sdb",
        "dsn",
        "fdb",
        "crypt5",
        "xmlff",
        "cpd",
        "aq",
        "mwb",
        "dbx",
        "nv2",
        "db-journal",
        "sdc",
        "grdb",
        "nnt",
        "usr",
        "orx",
        "abx",
        "mav",
        "ac",
        "mpd",
        "crypt6",
        "nsf",
        "fpt",
        "trc",
        "adb",
        "scx",
        "edb",
        "crypt",
        "myd",
        "kdb",
        "rpd",
        "ndf",
        "maq",
        "lwx",
        "ib",
        "cdb",
        "rodx",
        "maf",
        "lgc",
        "nwdb",
        "fmp",
        "ihx",
        "4dd",
        "udb",
        "bak",
        "abcddb",
        "ora",
        "pdb",
        "cat",
        "accdr",
        "fmp12",
        "vis",
        "qry",
        "vvv",
        "odb",
        "rctd",
        "mdbhtml",
        "sdy",
        "cma",
        "ade",
        "mrg",
        "db2",
        "tps",
        "dbt",
        "mdn",
        "pnz",
        "accdw",
        "ibd",
        "dbv",
        "nrmlib",
        "epim",
        "anb",
        "kexi",
        "ipj",
        "fmpsl",
        "dcx",
        "caf",
        "spq",
        "ftb",
        "tmd",
        "rmgc",
        "maw",
        "sas7bdat",
        "idb",
        "db-shm",
        "ecx",
        "nv",
        "jet",
        "sbf",
        "mfd",
        "rsd",
        "dsk",
        "ckp",
        "mdt",
        "rbf",
        "adb",
        "dad",
        "mud",
        "mas",
        "fp5",
        "^^^",
        "fm5",
        "dqy",
        "sda",
        "fp4",
        "dab",
        "luminar",
        "gwi",
        "xdb",
        "ns3",
        "bc3",
        "dct",
        "adn",
        "kexic",
        "owc",
        "pvoc",
        "p96",
        "vpd",
        "rod",
        "jtx",
        "exb",
        "erx",
        "ns2",
        "dadiagrams",
        "ns4",
        "edb",
        "kexis",
        "wrk",
        "fol",
        "fcd",
        "r2d",
        "sdx",
    ],
}
internet_symbol = {
    "symbol": f"{Text.Color.steel_blue}üåê{Text.Style.Reset}",
    "file_type": "internet",
    "supported_files": [
        "extension",
        "btapp",
        "crt",
        "mjs",
        "asax",
        "fwtemplate",
        "p7c",
        "fmp",
        "crdownload",
        "scss",
        "ssp",
        "spc",
        "jspa",
        "website",
        "ascx",
        "a5w",
        "whtt",
        "vrt",
        "dll",
        "php",
        "shtml",
        "xul",
        "dhtml",
        "download",
        "css",
        "bml",
        "cshtml",
        "dcr",
        "sites",
        "dml",
        "rjs",
        "aro",
        "codasite",
        "vsdisco",
        "obml16",
        "key",
        "webbookmark",
        "sites2",
        "json",
        "js",
        "dwt",
        "a4p",
        "chm",
        "wsdl",
        "dochtml",
        "kit",
        "htaccess",
        "xhtm",
        "p7b",
        "oam",
        "compressed",
        "site",
        "htm",
        "pem",
        "tpl",
        "aspx",
        "pac",
        "seam",
        "url",
        "svr",
        "xd",
        "asr",
        "dap",
        "appcache",
        "zul",
        "ewp",
        "wbs",
        "html",
        "gsp",
        "stml",
        "pro",
        "master",
        "stc",
        "fwp",
        "strm",
        "der",
        "disco",
        "epibrw",
        "gsp",
        "xss",
        "xpd",
        "asp",
        "rss",
        "htc",
        "ap",
        "gne",
        "sdb",
        "ashx",
        "browser",
        "bok",
        "node",
        "php2",
        "mhtml",
        "obml",
        "zhtml",
        "vdw",
        "p12",
        "axd",
        "opml",
        "webloc",
        "rhtml",
        "con",
        "nzb",
        "har",
        "alx",
        "chat",
        "csr",
        "jnlp",
        "do",
        "cms",
        "maff",
        "sht",
        "php4",
        "srf",
        "xht",
        "asa",
        "cha",
        "adr",
        "h5p",
        "qf",
        "hyperesources",
        "sparkle",
        "olp",
        "br",
        "uhtml",
        "xbel",
        "cer",
        "web",
        "cfm",
        "fwtemplateb",
        "jspx",
        "xfdl",
        "jsp",
        "mht",
        "crl",
        "aex",
        "hdml",
        "wml",
        "awm",
        "fcgi",
        "sass",
        "vrml",
        "phtml",
        "oth",
        "jss",
        "jsonl",
        "wpp",
        "itms",
        "sitemap",
        "pptmhtml",
        "dothtml",
        "ucf",
        "prf",
        "shtm",
        "freeway",
        "edge",
        "iqy",
        "page",
        "dbm",
        "discomap",
        "wdgt",
        "mvc",
        "hxs",
        "qbo",
        "csp",
        "hype",
        "psp",
        "svc",
        "xhtml",
        "jhtml",
        "webarchive",
        "rw3",
        "webarchivexml",
        "stl",
        "tpl",
        "xbl",
        "p7",
        "phtm",
        "wbxml",
        "rt",
        "widget",
        "bwp",
        "srl",
        "muse",
        "esproj",
        "hypesymbol",
        "zhtml",
        "vbd",
        "fwtb",
        "obml15",
        "woa",
        "webmanifest",
        "hypetemplate",
        "ognc",
        "pub",
        "ece",
        "mspx",
        "xws",
        "wgp",
        "tvpi",
        "asmx",
        "vbhtml",
        "idc",
        "rwsw",
        "webhistory",
        "jws",
        "att",
        "tvvi",
        "zvz",
        "lbc",
        "php3",
        "swz",
        "atom",
        "docmhtml",
        "cdf",
        "map",
        "php5",
        "nod",
        "htx",
        "rflw",
        "wgt",
        "lasso",
        "hdm",
        "an",
        "rwp",
        "vlp",
        "faces",
        "nxg",
        "less",
        "ccbjs",
        "wn",
        "saveddeck",
        "ppthtml",
        "stp",
        "mvr",
        "suck",
        "jvs",
        "wpx",
        "iwdgt",
        "mapx",
        "jst",
        "rwtheme",
        "cphd",
        "qbx",
        "ndjson",
        "moz",
        "zfo",
        "stm",
        "ptw",
        "itpc",
        "cfml",
        "qrm",
        "jcz",
        "cpg",
        "kcmsf",
    ],
}
system_symbol = {
    "symbol": f'{Text.fg("#bad80a")}üíª{Text.Style.Reset}',
    "file_type": "system",
    "supported_files": [
        "aml",
        "wdgt",
        "reg",
        "admx",
        "cur",
        "regtrans-ms",
        "icns",
        "ftf",
        "iconpackage",
        "clb",
        "ani",
        "dll",
        "deskthemepack",
        "searchconnector-ms",
        "73u",
        "htt",
        "desklink",
        "theme",
        "lnk",
        "vx_",
        "itemdata-ms",
        "hve",
        "vga",
        "dmp",
        "nfo",
        "dvd",
        "mdmp",
        "pk2",
        "pck",
        "rmt",
        "qvm",
        "ebd",
        "ico",
        "nt",
        "inf_loc",
        "sys",
        "cpl",
        "library-ms",
        "hiv",
        "scr",
        "asec",
        "sfcache",
        "rc1",
        "manifest",
        "prop",
        "pat",
        "bash_history",
        "ion",
        "bin",
        "cab",
        "zoneidentifier",
        "cgz",
        "etl",
        "ffx",
        "service",
        "menu",
        "nlt",
        "pwl",
        "000",
        "h1s",
        "edj",
        "fota",
        "lockfile",
        "elf",
        "timer",
        "log1",
        "prefpane",
        "ci",
        "mapimail",
        "mui",
        "dat",
        "msc",
        "adm",
        "sdb",
        "fx",
        "firm",
        "wdf",
        "mlc",
        "lfs",
        "cm0013",
        "mod",
        "bash_profile",
        "msstyles",
        "mtz",
        "mobileconfig",
        "pnf",
        "sys",
        "pit",
        "efi",
        "mbr",
        "drv",
        "c32",
        "pol",
        "group",
        "webpnp",
        "hhk",
        "208",
        "msp",
        "0",
        "diagcab",
        "bcd",
        "bio",
        "bashrc",
        "ins",
        "pdr",
        "3fs",
        "img3",
        "dthumb",
        "drpm",
        "aos",
        "prf",
        "sdt",
        "cannedsearch",
        "chs",
        "ioplist",
        "cnt",
        "savedsearch",
        "vxd",
        "job",
        "nls",
        "ppd",
        "mbn",
        "sbf",
        "dit",
        "hdmp",
        "wpx",
        "cat",
        "crash",
        "key",
        "fpbf",
        "bom",
        "mui_cccd5ae0",
        "dev",
        "log2",
        "profile",
        "lst",
        "nb0",
        "8xu",
        "shd",
        "adml",
        "hlp",
        "tdz",
        "chg",
        "ks",
        "ime",
        "cpq",
        "idx",
        "sbn",
        "swp",
        "panic",
        "grp",
        "schemas",
        "shsh",
        "sqm",
        "386",
        "2fs",
        "kext",
        "hcd",
        "flg",
        "hhc",
        "ps2",
        "odex",
        "wer",
        "adv",
        "ko",
        "dfu",
        "icl",
        "tha",
        "dimax",
        "im4p",
        "cpi",
        "printerexport",
        "8cu",
        "chk",
        "pro",
        "ntfs",
        "pfx",
        "bmk",
        "cht",
        "metadata_never_index",
        "blf",
        "mi4",
        "atahd",
        "nbh",
        "msstyle",
        "trx_dll",
        "prt",
        "pid",
        "str",
        "saver",
        "customdestinations-ms",
        "thumbnails",
        "bk2",
        "configprofile",
        "xrm-ms",
        "spl",
        "so0",
        "ruf",
        "mum",
        "cap",
        "cpr",
        "ps1",
        "me",
        "hsh",
        "bk1",
        "dlx",
        "cmo",
        "sin",
        "uce",
        "xfb",
        "shsh2",
        "gmmp",
        "escopy",
        "mem",
        "provisionprofile",
        "ifw",
        "efires",
        "b84",
        "mun",
        "b83",
        "diagpkg",
        "lpd",
        "rfw",
        "hpj",
        "cm0012",
        "dic",
        "kdz",
        "0",
        "kwi",
        "evtx",
        "grl",
        "scf",
        "fl1",
        "ffa",
        "devicemetadata-ms",
        "kbd",
        "dyc",
        "ppm",
        "trashes",
        "ffo",
        "rc2",
        "automaticdestinations-ms",
        "dss",
        "idi",
        "sb",
        "vgd",
        "bud",
        "lpd",
        "wph",
        "mydocs",
        "localized",
        "iptheme",
        "rco",
        "networkconnect",
        "scap",
        "ipod",
        "fts",
        "plasmoid",
        "qky",
        "rs",
        "jpn",
        "fid",
        "ta",
        "wgz",
        "spx",
        "cdmp",
        "mmv",
        "ius",
        "kor",
        "evt",
        "diagcfg",
        "vdex",
        "lex",
        "89u",
        "ffl",
        "lm",
        "dub",
        "ftg",
        "wlu",
        "dock",
        "trashinfo",
        "rcv",
        "reglnk",
        "tco2",
        "emerald",
        "ann",
        "help",
        "diffbase",
        "ozip",
        "internetconnect",
        "its",
        "rvp",
    ],
}


def f_print(file):
    global show_file_name, show_file_type  # ◊ú◊¢◊©◊ï◊™ ◊©◊ë◊ß◊¶◊î ◊ô◊î◊ô◊î ◊ê◊™ ◊î◊ò◊ô◊ô◊§ ◊û◊î◊ì◊ô◊ß◊©◊ô◊†◊®◊ô
    path_file = os.path.join(start_folder, file)

    file_name, file_extension = os.path.splitext(file)
    if os.path.exists(file):
        file_name = os.path.basename(file)
        if file_name == "":
            file_name = "C:"
    if file_extension[1:] in text_file_symbol["supported_files"]:
        print(
            (" " * check_tabs(path_file))
            + "|_"
            + text_file_symbol["symbol"]
            + (" " + file_name + file_extension if show_file_name else "")
            + (("  ==> " + text_file_symbol["file_type"]) if show_file_type else "")
        )
    elif os.path.isdir(path_file):
        if path_file != "C:\\":
            print(
                (" " * check_tabs(path_file))
                + "|_"
                + folder_symbol["symbol"]
                + (" " + file_name + file_extension if show_file_name else "")
                + (("  ==> " + folder_symbol["file_type"]) if show_file_type else "")
            )
        else:
            print(
                (
                    folder_symbol["symbol"]
                    + (" " + file_name + file_extension if show_file_name else "")
                )
            )
    elif file_extension[1:] in zip_folder_symbol["supported_files"]:
        print(
            (" " * check_tabs(path_file))
            + "|_"
            + zip_folder_symbol["symbol"]
            + (" " + file_name + file_extension if show_file_name else "")
            + (("  ==> " + zip_folder_symbol["file_type"]) if show_file_type else "")
        )
    elif file_extension[1:] in image_symbol["supported_files"]:
        print(
            (" " * check_tabs(path_file))
            + "|_"
            + image_symbol["symbol"]
            + (" " + file_name + file_extension if show_file_name else "")
            + (("  ==> " + image_symbol["file_type"]) if show_file_type else "")
        )
    elif file_extension[1:] in executable_symbol["supported_files"]:
        print(
            (" " * check_tabs(path_file))
            + "|_"
            + executable_symbol["symbol"]
            + (" " + file_name + file_extension if show_file_name else "")
            + (("  ==> " + executable_symbol["file_type"]) if show_file_type else "")
        )
    elif file_extension[1:] in video_symbol["supported_files"]:
        print(
            (" " * check_tabs(path_file))
            + "|_"
            + video_symbol["symbol"]
            + (" " + file_name + file_extension if show_file_name else "")
            + (("  ==> " + video_symbol["file_type"]) if show_file_type else "")
        )
    elif file_extension[1:] in audio_symbol["supported_files"]:
        print(
            (" " * check_tabs(path_file))
            + "|_"
            + audio_symbol["symbol"]
            + (" " + file_name + file_extension if show_file_name else "")
            + (("  ==> " + audio_symbol["file_type"]) if show_file_type else "")
        )
    elif file_extension[1:] in data_symbol["supported_files"]:
        print(
            (" " * check_tabs(path_file))
            + "|_"
            + data_symbol["symbol"]
            + (" " + file_name + file_extension if show_file_name else "")
            + (("  ==> " + data_symbol["file_type"]) if show_file_type else "")
        )
    elif file_extension[1:] in internet_symbol["supported_files"]:
        print(
            (" " * check_tabs(path_file))
            + "|_"
            + internet_symbol["symbol"]
            + (" " + file_name + file_extension if show_file_name else "")
            + (("  ==> " + internet_symbol["file_type"]) if show_file_type else "")
        )
    elif file_extension[1:] in system_symbol["supported_files"]:
        print(
            (" " * check_tabs(path_file))
            + "|_"
            + system_symbol["symbol"]
            + (" " + file_name + file_extension if show_file_name else "")
            + (("  ==> " + system_symbol["file_type"]) if show_file_type else "")
        )
    else:
        print(
            (" " * check_tabs(path_file))
            + "|_"
            + f'{Text.fg("#ec008c")}‚ùì{Text.Style.Reset}'
            + (" " + file_name + file_extension if show_file_name else "")
        )


def start(show_file_fullname=True, all_directory=False, show_type=False, file=""):
    global show_file_name, start_folder, show_all_directory, start_folder, show_file_type
    start_folder = file
    if os.path.exists(start_folder):
        show_file_name = show_file_fullname
        show_all_directory = all_directory
        show_file_type = show_type
        if all_directory == True:
            parents = []
            for i, folder in enumerate(Path(start_folder).parents):
                parents.append(folder)
            parents = parents[::-1]
            for folder in parents:
                f_print(folder)
            print(
                (" " * check_tabs(folder))
                + "|_"
                + folder_symbol["symbol"]
                + (" " + os.path.basename(start_folder) if show_file_name else "")
            )
        else:
            print(
                folder_symbol["symbol"]
                + (" " + os.path.basename(start_folder) if show_file_name else "")
            )
        for file in os.listdir(start_folder):
            f_print(file)
    else:
        print("Not a directory! please enter a valid directory next time")
        quit()
    os.startfile(start_folder)


def check_tabs(path):
    if show_all_directory != True:
        return len(Path(path).parents) - len(Path(start_folder).parents)
    else:
        return len(Path(path).parents)


# start_folder = input(f'Folder {Text.Color.light_green_2}>>>{Text.Style.Reset} ')


start(
    file="",
    show_file_fullname=True,
    all_directory=True,
    show_type=True,
)


